{
	"nodes":[
		{"id":"1c8b109c14278d4a","type":"group","x":-640,"y":-240,"width":2400,"height":1174,"label":"Какупшева"},
		{"id":"ca177a1d1aeecb2c","type":"group","x":-2520,"y":680,"width":1792,"height":1240,"label":"Верова"},
		{"id":"2a2963822b1a8fa1","type":"group","x":-640,"y":1020,"width":2400,"height":560,"label":"Сапунов"},
		{"id":"29ba1a63dce3e8f3","type":"group","x":-2520,"y":-240,"width":1760,"height":731,"label":"Кузнецов"},
		{"id":"1156fda1e3acdb2e","type":"group","x":-2520,"y":-1000,"width":1760,"height":672,"label":"Супрунов"},
		{"id":"f8b5e0fe6bc66ade","type":"text","text":"```python\ndef calculate_discount(sale_amount):\n    \"\"\"Функция для вычисления суммы скидки.\"\"\"\n    if sale_amount <= 5000:\n        discount_rate = 0.05  # 5%\n    elif sale_amount <= 15000:\n        discount_rate = 0.12  # 12%\n    elif sale_amount <= 25000:\n        discount_rate = 0.20  # 20%\n    else:\n        discount_rate = 0.30  # 30%\n\n    discount_amount = sale_amount * discount_rate\n    return discount_amount\n\n# Ввод суммы продажи пользователем\ntry:\n    sale_amount = float(input(\"Введите сумму продажи: \"))\n    \n    if sale_amount < 0:\n        print(\"Сумма продажи не может быть отрицательной.\")\n    else:\n        discount = calculate_discount(sale_amount)\n        print(f\"Сумма скидки: {discount:.2f}\")\nexcept ValueError:\n    print(\"Пожалуйста, введите корректное число.\")\n    \n    '''\n    После вычисления скидки \n    программа должна вывести саму скидку и сумму с вычетом скидки. Выодится только\n    сама скидка\n    '''\n    \ninput()\n\n```","x":0,"y":-200,"width":560,"height":520},
		{"id":"60fb8e550eab563d","type":"file","file":"Интерактивная среда/Материалы/Материал группы 206/Задания для исправления/Какупшева Условная конструкция if 4.py","x":-580,"y":-200,"width":400,"height":400},
		{"id":"1734e1d1a03b1563","type":"file","file":"Интерактивная среда/Материалы/Материал группы 206/Задания для исправления/Кузнецов. Классы и объекты (2) -.py","x":-2467,"y":-200,"width":400,"height":400},
		{"id":"a44d03c2892357e3","type":"text","text":"Нет вывода, хотя должен быть","x":-1798,"y":-35,"width":278,"height":60},
		{"id":"56426c454db6c232","type":"file","file":"Интерактивная среда/Материалы/Материал группы 206/Задания для исправления/Проекст Тетрис Супрунов Дмитрий 206г.py","x":-2382,"y":-920,"width":400,"height":400},
		{"id":"515220b070e55210","type":"text","text":"Не работает","x":-1713,"y":-738,"width":250,"height":60},
		{"id":"2d28a5e072656d03","type":"text","text":"```python\ndef func1():\n\tparam = 4\n\n\tdef inner():\n\t\tparam += 1\n\n\treturn param\n\n    #выдаст ошибку\n    # Функция не выдаст ошибку, дайте правильный ответ\n```","x":0,"y":420,"width":560,"height":388},
		{"id":"a14873f3b984d2e2","type":"file","file":"Интерактивная среда/Материалы/Материал группы 206/Задания для исправления/Какупшева Функции задание 2 пример 1.py","x":-580,"y":460,"width":400,"height":400},
		{"id":"24a889b13bdd0ec6","type":"file","file":"Интерактивная среда/Материалы/Материал группы 206/Задания для исправления/инкапсуляция Верова.py","x":-2467,"y":920,"width":170,"height":153},
		{"id":"fcdd57d2b6b20d40","type":"file","file":"Интерактивная среда/Материалы/Материал группы 206/Задания для исправления/Верова классы и обьекты 2.py","x":-2467,"y":1320,"width":170,"height":180},
		{"id":"f175d6cf6459696d","type":"text","text":"","x":-1685,"y":1176,"width":250,"height":60},
		{"id":"bc018cef89f2bb6b","type":"text","text":"```python\nclass BankAccount:\n    def __init__(self, account_number, owner, balance=0):\n        self.account_number = account_number\n        self._owner = owner\n        self._balance = balance\n\n    def get_owner(self):\n        return self._owner\n\n    def add(self, amount):\n        if amount > 0:\n            self._balance += amount\n            print(f\"Добавлено {amount}. Новый баланс: {self._balance}\")\n        else:\n            print(\"Сумма должна быть положительной.\")\n\n    def withdraw(self, amount):\n        if amount > self._balance:\n            print(\"Недостаточно средств на счете.\")\n        elif amount <= 0:\n            print(\"Сумма должна быть положительной.\")\n        else:\n            self._balance -= amount\n            print(f\"Снято {amount}. Новый баланс: {self._balance}\")\n\n# По условию необходимо добавить свойство balance (только для чтения), \n# которое позволяет получить текущее значение баланса.\n\nif __name__ == \"__main__\":\n    account = BankAccount(\"123456789\", \"John Doe\", 0)\n    print(f\"Владелец счета: {account.get_owner()}\")\n    try:\n        account._owner = \"Jane Smith\"\n    except AttributeError as e:\n        print(f\"Ошибка: {e}\")\n    account.add(1000)\n    account.withdraw(500)\n    account.withdraw(1000)\n```","x":-2107,"y":900,"width":405,"height":280},
		{"id":"ddfdc7b2cc83a305","type":"text","text":"```python\nclass BankAccount:\n    def __init__(self, account_number, initial_balance):\n        self.account_number = account_number\n        self.balance = initial_balance\n    def add(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"На счет\"\n                  f\" {self.account_number} добавлено {amount}.\"\n                  f\" Новый баланс {self.balance}\")\n            if amount > self.balance:\n                print(\"Недостаточно средств на счете\")\n            elif amount > 0:\n                self.balance -= amount\n                print(f\"С счета\"\n                      f\" {self.account_number} снято {amount}.\"\n                      f\" Остаток на счете: {self.balance}.\")\n            else:\n                print(\"Сумма для снятия должна быть положительной.\")\naccount = BankAccount(\"123456789\", 100)\naccount.add(100)\n\n#Условие выполненно не до конца. По условию нужно добавить метод, который \n# добавляет средства на счет и метод, который снимает.\n\n```","x":-2107,"y":1210,"width":405,"height":400},
		{"id":"2d41776abfebcc79","type":"file","file":"Информационные технологии/Второй курс/Основы алгоритмизации и программирования/Практические задания для Python/Задание. Инкапсуляция, атрибуты и свойства.md","x":-1160,"y":1210,"width":400,"height":400},
		{"id":"7f4e2c6fbf2f64f0","type":"file","file":"Информационные технологии/Второй курс/Основы алгоритмизации и программирования/Практические задания для Python/Задание. Классы и объекты.md","x":-1160,"y":765,"width":400,"height":341},
		{"id":"83b67fdf4088112e","type":"text","text":"По условию необходимо добавить свойство balance (только для чтения), \nкоторое позволяет получить текущее значение баланса.","x":-1560,"y":1325,"width":250,"height":170},
		{"id":"05fa44e0ef2e64bc","type":"text","text":"Условие выполнено не до конца. По условию нужно добавить метод, который \nдобавляет средства на счет и метод, который снимает.","x":-1560,"y":974,"width":250,"height":132},
		{"id":"439122e2b907ff08","type":"text","text":"После вычисления скидки \n    программа должна вывести саму скидку и сумму с вычетом скидки. Выодится только\n    сама скидка","x":640,"y":-42,"width":250,"height":205},
		{"id":"05c45835fee120f1","type":"file","file":"Информационные технологии/Второй курс/Основы алгоритмизации и программирования/Практические задания для Python/Задание. Условная конструкция if.md","x":1000,"y":-110,"width":400,"height":400},
		{"id":"8804ccdd0fac05f1","type":"file","file":"Информационные технологии/Второй курс/Основы алгоритмизации и программирования/Практические задания для Python/Задание. Функции.md","x":1000,"y":380,"width":400,"height":400},
		{"id":"ba084739c7113654","type":"text","text":"Функция не выдаст ошибку, дайте правильный ответ","x":640,"y":542,"width":250,"height":77},
		{"id":"22dee77eae4d860b","type":"text","text":"```python\nclass BankAccount:\n    def __init__(self, account_number, initial_balance):\n        self.account_number = account_number\n        self.balance = initial_balance\n    def add(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"На счет\"\n                  f\" {self.account_number} добавлено {amount}.\"\n                  f\" Новый баланс {self.balance}\")\n            if amount > self.balance:\n                print(\"Недостаточно средств на счете\")\n            elif amount > 0:\n                self.balance -= amount\n                print(f\"С счета\"\n                      f\" {self.account_number} снято {amount}.\"\n                      f\" Остаток на счете: {self.balance}.\")\n            else:\n                print(\"Сумма для снятия должна быть положительной.\")\naccount = BankAccount(\"123456789\", 100)\naccount.add(100)\n\n#Условие выполненно не до конца. По условию нужно добавить метод, который \n# добавляет средства на счет и метод, который снимает.\n```","x":-180,"y":1080,"width":620,"height":450},
		{"id":"35913c09a3b2e68f","type":"file","file":"Интерактивная среда/Материалы/Материал группы 206/Задания для исправления/Сапунов классы и обьекты 2.py","x":-540,"y":1160,"width":200,"height":180},
		{"id":"80b9507eee95379a","type":"text","text":"Условие выполнено не до конца. По условию нужно добавить метод, который \nдобавляет средства на счет и метод, который снимает.","x":520,"y":1239,"width":250,"height":132},
		{"id":"152ecdd1e610dbfb","type":"file","file":"Информационные технологии/Второй курс/Основы алгоритмизации и программирования/Практические задания для Python/Задание. Классы и объекты.md","x":980,"y":1201,"width":400,"height":341}
	],
	"edges":[
		{"id":"eb32f02463a63185","fromNode":"439122e2b907ff08","fromSide":"left","toNode":"f8b5e0fe6bc66ade","toSide":"right"},
		{"id":"7ba79648847b1474","fromNode":"60fb8e550eab563d","fromSide":"right","toNode":"f8b5e0fe6bc66ade","toSide":"left"},
		{"id":"c820f58bb78bebea","fromNode":"05c45835fee120f1","fromSide":"left","toNode":"439122e2b907ff08","toSide":"right"},
		{"id":"765041c1765bd571","fromNode":"2d28a5e072656d03","fromSide":"left","toNode":"a14873f3b984d2e2","toSide":"right"},
		{"id":"00481f070f82e397","fromNode":"8804ccdd0fac05f1","fromSide":"left","toNode":"ba084739c7113654","toSide":"right"},
		{"id":"2d71e24c905ed60c","fromNode":"ba084739c7113654","fromSide":"left","toNode":"2d28a5e072656d03","toSide":"right"},
		{"id":"e214661024cda1a4","fromNode":"22dee77eae4d860b","fromSide":"left","toNode":"35913c09a3b2e68f","toSide":"right"},
		{"id":"6f7fcd213fcb8126","fromNode":"80b9507eee95379a","fromSide":"left","toNode":"22dee77eae4d860b","toSide":"right"},
		{"id":"b4bfa816e30f5b0e","fromNode":"152ecdd1e610dbfb","fromSide":"left","toNode":"80b9507eee95379a","toSide":"right"},
		{"id":"5ec36e9e002aefe4","fromNode":"ddfdc7b2cc83a305","fromSide":"left","toNode":"fcdd57d2b6b20d40","toSide":"right"},
		{"id":"892474f495816817","fromNode":"bc018cef89f2bb6b","fromSide":"left","toNode":"24a889b13bdd0ec6","toSide":"right"},
		{"id":"fb97ef5f212704ba","fromNode":"83b67fdf4088112e","fromSide":"left","toNode":"ddfdc7b2cc83a305","toSide":"right"},
		{"id":"b10211e4a64e2d42","fromNode":"05fa44e0ef2e64bc","fromSide":"left","toNode":"bc018cef89f2bb6b","toSide":"right"},
		{"id":"6319c2321824efbc","fromNode":"2d41776abfebcc79","fromSide":"left","toNode":"83b67fdf4088112e","toSide":"right"},
		{"id":"093eefe864b28048","fromNode":"7f4e2c6fbf2f64f0","fromSide":"left","toNode":"05fa44e0ef2e64bc","toSide":"right"},
		{"id":"3b4501894f3e6cc1","fromNode":"1734e1d1a03b1563","fromSide":"right","toNode":"a44d03c2892357e3","toSide":"left"},
		{"id":"e2b3d3c5ca7ce9e2","fromNode":"56426c454db6c232","fromSide":"right","toNode":"515220b070e55210","toSide":"left"}
	]
}